var DragonSlayer = DragonSlayer || {};
 
var dragonFly = true;
var dragonLanded = false;
var flameOn = false;

DragonSlayer.Game = function () {

	this.score = 0;
	
	//set constants for spawning timers
	this.blackKnightRate = 5000;
	this.blackKnightTimer = 0;
	
	this.skeletonRate = 3000;
	this.skeletonTimer = 0;
	
	this.healthPotionRate = 70000;
	this.healthPotionTimer = 70000;

	this.chestRate = 30000;
	this.chestTimer = 30000;

	this.crystalRate = 15000;
	this.crystalTimer = 15000;

	this.gemRate = 37000;
	this.gemTimer = 37000;

	this.coinRate = 70000;
	this.coinTimer = 70000;


};

DragonSlayer.Game.prototype = {
	
	create: function () {
		
		this.game.physics.startSystem(Phaser.Physics.ARCADE);
		this.setSurrounds();
		this.setDragon();
		this.setPlayer1();

		this.healthPotion = this.add.sprite(0, 0, 'Potions');
		this.healthPotion.animations.add('health', [25]);
		this.healthPotion.animations.play('health', 1, false);
		this.healthPotion.scale.setTo(1.2);
		this.healthPotion.anchor.setTo(0.5);
		this.game.physics.arcade.enableBody(this.healthPotion);
		this.healthPotion.exists = false;

		this.healthPotionCollected = this.add.sprite(0, 0, 'Potions');
		this.healthPotionCollected.animations.add('health', [25]);
		this.healthPotionCollected.animations.play('health', 1, false);
		this.healthPotionCollected.scale.setTo(1.2);
		this.healthPotionCollected.anchor.setTo(0.5);
		this.healthPotionCollected.exists = false;

		this.blackKnights = this.game.add.group();
		this.skeletons = this.game.add.group();
		this.chests = this.game.add.group();
		this.crystals = this.game.add.group();
		this.gems = this.game.add.group();
		this.coins = this.game.add.group();
		
		this.keys = {
			//setting the keys that the player can use
			up: this.game.input.keyboard.addKey(Phaser.Keyboard.UP), 
            down: this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN), 
            left: this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT), 
            right: this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT),
            attack: this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR),
            heal: this.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT)
		};
		
		this.scoreText = this.game.add.bitmapText(10, 60, 'Albion', 'Thine score doth be: 0', 50);

		this.gameMusic = this.game.add.audio('gameMusic');
		this.gameMusic.play('', 0, true, true);
		this.gameMusic.loop = true;

	},

	setSurrounds: function () {
		
		this.background = this.game.add.tileSprite(0, 0, this.game.width, this.game.height/2.01,'Wall');
		this.ground = this.game.add.tileSprite(0, this.game.height/2, this.game.width, this.game.height, 'Grass');

	},

	
 
/*///////////////////////////////////////////////////////////////////////////////////
  ____       _   _   _             	 _   _            ____  _                       
 / ___|  ___| |_| |_(_)_ __   __ _  | |_| |__   ___  |  _ \| | __ _ _   _  ___ _ __ 
 \___ \ / _ | __| __| | '_ \ / _` | | __| '_ \ / _ \ | |_) | |/ _` | | | |/ _ | '__|
  ___) |  __| |_| |_| | | | | (_| | | |_| | | |  __/ |  __/| | (_| | |_| |  __| |   
 |____/ \___|\__|\__|_|_| |_|\__, |  \__|_| |_|\___| |_|   |_|\__,_|\__, |\___|_|   
                             |___/                                  |___/          
*///////////////////////////////////////////////////////////////////////////////////
	setPlayer1: function () {

		this.player1 = this.add.sprite(0, this.game.height/1.3, 'Player1');
		this.player1.x = this.game.width/2 - this.player1.width/4.3;
		this.player1.anchor.setTo(0.5);
		this.player1.animations.add('move', [65,66,67,68]);
		this.player1.animations.add('attack', [19,20,21,22,23,24,31,32,33,0]);
		this.player1.animations.add('die', [34,35,36,37,38,39,40,41,42]);
		this.player1.animations.add('hit', [54,55,56,57,58,55,54,0]);
		this.player1.health = 20000;
		this.player1.damage = 0;
		this.game.physics.arcade.enableBody(this.player1);
		this.player1.bar = this.add.bitmapData(100,2);
		this.player1.healthBar = this.game.add.sprite(this.player1.x - this.player1.bar.width/2 -15, this.player1.y - 100, this.player1.bar);

	},

	getKeys: function () {
		
		if (this.keys.left.isDown) {
			
			this.player1.scale.setTo(-1, 1);
			this.player1.body.velocity.x = -120;
			this.clipClop();
		
		} else if (this.keys.right.isDown) {
			
			this.player1.scale.setTo(1, 1)
			this.player1.body.velocity.x = 120;
			this.clipClop();
		
		} else {
			
			this.player1.body.velocity.x = 0;

		}
		
		if (this.keys.up.isDown) {
			
			this.clipClop();
			
			if (this.player1.body.y <= this.game.height/3) {
				
				this.player1.body.velocity.y = 0;
			
			} else {
				
				this.player1.body.velocity.y = -120;
			}
				
		} else if (this.keys.down.isDown) {
			
			this.player1.body.velocity.y = 120;
			this.clipClop();

		} else {
			
			this.player1.body.velocity.y = 0;
		}
	},

	player1Health: function () {
		//setting the health bar
		this.player1.healthBarProgress = (this.player1.health - this.player1.damage)/this.player1.health * 100;
		this.player1.bar.context.clearRect(this.player1.body.position.x, 0, this.player1.healthBarProgress, this.player1.bar.height);
        this.player1.bar.context.fillStyle = '#0f0';
		this.player1.bar.context.fillRect(0, 0, this.player1.healthBarProgress, 2);
		this.player1.bar.dirty = true; //makes it update in the browser
		this.player1.healthBar.x = this.player1.body.position.x +20;
		this.player1.healthBar.width = this.player1.healthBarProgress;
		//healthbar width is going to be a percentage of the total health of the player (healthBarProgress)
		
		if (this.player1.healthBarProgress <= 0) {
			
			this.player1.healthBar.width = 0;
			
			if (!this.player1.dead) {
				
				//Game over - stops all animations and spawning
				this.blackKnights.setAll('body.velocity.x', 0);
				this.skeletons.setAll('body.velocity.x', 0);
				this.dragon.body.velocity.x = 0;
				this.blackKnights.setAll('body.velocity.y', 0);
				this.skeletons.setAll('body.velocity.y', 0);
				this.dragon.body.velocity.y = 0;
				this.blackKnightTimer = Number.MAX_VALUE;
				this.skeletonTimer = Number.MAX_VALUE;
				this.healthPotionTimer = Number.MAX_VALUE;
				this.chestTimer = Number.MAX_VALUE;
				this.crystalTimer = Number.MAX_VALUE;
				this.gemTimer = Number.MAX_VALUE;
				this.coinTimer = Number.MAX_VALUE;

				var scoreBoard = new Scoreboard(this.game);
				scoreBoard.show(this.score);

				this.player1.dead = true;
			
			}	
		}
		
		this.player1.healthBar.y = this.player1.y - 100;
	},

	clipClop: function () {
		//provides the animation of the player moving across the screen
		this.player1.animations.play('move', 8, false);
		this.player1.anchor.setTo(0.5, 0.73);
	},

	fight: function () {
		
		if (this.keys.attack.isDown) {
			
			this.keys.disabled = true;
			this.player1.body.velocity.x = 0;
			this.player1.body.velocity.y = 0;
			
		} else {
			
			this.getKeys();
		
		}
	},

	movePlayer1: function () {
		
		this.fight();
		this.faceMe();
		this.player1.body.collideWorldBounds = true;
	
	},

	faceMe: function () {
		
		for (var i = 0; i < this.blackKnights.children.length; i++) {
			
			if (this.player1.body.position.x > this.blackKnights.children[i].body.position.x) {
				
				this.blackKnights.children[i].scale.setTo(1,1);

			} else {
				
				this.blackKnights.children[i].scale.setTo(-1,1);

			}

			if (this.player1.y > this.blackKnights.children[i].y) {
				
				this.player1.moveUp()
				this.blackKnights.children[i].moveDown();
				this.ground.moveDown();
				this.background.moveDown();

			} else {
				
				this.player1.moveDown();
				this.ground.moveDown();
				this.background.moveDown();
			}
		}

		for (var i = 0; i < this.skeletons.children.length; i++) {
			
			if (this.player1.body.position.x > this.skeletons.children[i].body.position.x) {
				
				this.skeletons.children[i].scale.setTo(1,1);
			
			} else {
				
				this.skeletons.children[i].scale.setTo(-1,1);
			}

			if (this.player1.y > this.skeletons.children[i].y) {
				
				this.player1.moveUp()
				this.skeletons.children[i].moveDown();
				this.ground.moveDown();
				this.background.moveDown();

			} else {
				
				this.player1.moveDown();
				this.ground.moveDown();
				this.background.moveDown();
			}

			for (var j = 0; j < this.blackKnights.children.length; j++) {
				if (this.skeletons.children[i].y > this.blackKnights.children[j].y) {
					this.skeletons.children[i].moveDown();
					this.ground.moveDown();
					this.background.moveDown();
				} else {
					this.skeletons.children[i].moveUp();
				}
			}
		}

		if (this.player1.body.position.x > (this.dragon.body.position.x + 99)) {
				
			this.dragon.scale.setTo(1.75, 1.75);
			
		} else {
				
			this.dragon.scale.setTo(-1.75, 1.75);
		}


	},

/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ____       _   _   _               _   _            ____  _            _      _  __      _       _     _       
 / ___|  ___| |_| |_(_)_ __   __ _  | |_| |__   ___  | __ )| | __ _  ___| | __ | |/ /_ __ (_) __ _| |__ | |_ ___ 
 \___ \ / _ | __| __| | '_ \ / _` | | __| '_ \ / _ \ |  _ \| |/ _` |/ __| |/ / | ' /| '_ \| |/ _` | '_ \| __/ __|
  ___) |  __| |_| |_| | | | | (_| | | |_| | | |  __/ | |_) | | (_| | (__|   <  | . \| | | | | (_| | | | | |_\__ \
 |____/ \___|\__|\__|_|_| |_|\__, |  \__|_| |_|\___| |____/|_|\__,_|\___|_|\_\ |_|\_|_| |_|_|\__, |_| |_|\__|___/
                             |___/                                                           |___/               
*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	createBlackKnight: function () {
		
		var x = this.game.rnd.realInRange(0, this.game.width);
		var y = this.game.rnd.realInRange(this.game.height, this.game.height/2);
		var blackKnight = this.blackKnights.getFirstExists(false);
		if (!blackKnight) {
			
			this.blackKnight = new BlackKnight(this.game, 0, 0);
			this.blackKnights.add(this.blackKnight);
			this.blackKnight.bar = this.add.bitmapData(100,2);
			this.blackKnight.healthBar = this.game.add.sprite(this.blackKnight.x - this.blackKnight.bar.width/2 -15, this.blackKnight.y - 100, this.blackKnight.bar);
		}

		this.blackKnight.reset(x, y);
		this.blackKnight.revive();

	},

	moveKnight: function () {		
		
		if (!this.player1.dead) {
			
			for (var i = 0; i < this.blackKnights.children.length; i++) {
				
				var blackKnight = this.blackKnights.children[i]
				
				if (parseInt(blackKnight.body.position.x) - parseInt(this.player1.body.position.x) > 40 && ((blackKnight.scale.x === -1 && this.player1.scale.x === 1) || (blackKnight.scale.x === -1 && this.player1.scale.x === -1))) {
					
					blackKnight.body.velocity.x = -100;
					blackKnight.animations.play('move', 8, false);

				} else if (parseInt(this.player1.body.position.x) - parseInt(blackKnight.body.position.x) > 40 && ((blackKnight.scale.x === 1 && this.player1.scale.x === 1) || (blackKnight.scale.x === 1 && this.player1.scale.x === -1) ) ) {
					

					blackKnight.body.velocity.x = 100;
					blackKnight.animations.play('move', 8, false);
				} else {
					
					blackKnight.body.velocity.x = 0;
				
				}
				
				if (this.player1.body.position.y > blackKnight.body.position.y - 5) {
					
					blackKnight.body.velocity.y = 100;
					blackKnight.animations.play('move', 8, false);
				
				} else if (this.player1.y < blackKnight.y - 5) {
					
					blackKnight.body.velocity.y = -100;
					blackKnight.animations.play('move', 8, false);
				
				} 
				else {
					
					blackKnight.body.velocity.y = 0;
					
				}
						
			}
		}
	},

	knightHit: function (player1, blackKnight) {
		
		if ((parseInt( blackKnight.body.position.x) - parseInt(player1.body.position.x) <= 40 || parseInt(player1.body.position.x) - parseInt( blackKnight.body.position.x) <= 40 )) {

			if (this.player1.healthBarProgress > 0) {
				
				if (this.keys.attack.isDown) {
					
					player1.animations.play('attack', 10, false);
					player1.anchor.setTo(0.5, 0.58);
					
					if ((blackKnight.scale.x === 1 && player1.scale.x === -1) || (blackKnight.scale.x === -1 && player1.scale.x === 1)) {
					
						blackKnight.animations.play('hit', 8, false);
						blackKnight.damage++;
					
					} 	
				};
				
				if (!blackKnight.dead) {
					if (blackKnight.healthBarProgress > 0) {
						if (!(this.keys.attack.isDown) || (blackKnight.scale.x === -1 && player1.scale.x === -1)|| (blackKnight.scale.x === 1 && player1.scale.x === 1)) {
							
							if (player1.y > blackKnight.y) {
								
								blackKnight.animations.play('attack1', 8, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage++;
									
									
								});
							
							} else {
								
								player1.moveDown();
								blackKnight.moveUp();
								this.ground.moveDown();
								this.background.moveDown();
								
								blackKnight.animations.play('attack2', 7, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage +=2
									blackKnight.moveUp();
									
									
								});	

								this.ground.moveDown();
								this.background.moveDown();
									
							}
						}
					} else {
						this.blackKnights.remove( blackKnight );
						var blackKnightDead = this.add.sprite(blackKnight.x, blackKnight.y, 'BlackKnight');
						blackKnightDead.anchor.setTo(0.5,0.5);
						
						if (blackKnight.x < player1.x) {
							
							blackKnightDead.scale.setTo(1,1);

						} else {
							
							blackKnightDead.scale.setTo(-1,1);
						}
						
						blackKnightDead.animations.add('die', [48, 49, 50, 51, 52, 53]);
						blackKnightDead.play('die', 8 ,false, true);
						this.score += 500;
								
					}	
				}
						
			} else if (player1.healthBarProgress <= 0) {
				
				player1.kill();
				var player1Dead = this.add.sprite(0, this.game.height/1.3, 'Player1');
				player1Dead.anchor.setTo(0.5);
				player1Dead.x = player1.x;
				player1Dead.y = player1.y;
				
				if (player1.scale.setTo(1,1)) {
					
					player1Dead.scale.setTo(1,1);
				
				} else if (player1.scale.setTo(-1,1)) {
					
					player1Dead.scale.setTo(-1,1);
				
				}

				player1Dead.animations.add('die', [34,35,36,37,38,39,40,41]);
				player1Dead.animations.play('die', 8 ,false).onComplete.add(function() {
					player1Dead.kill();
				})
		
			}						
		}
	},


	

	knightHealth: function () {
		
		for (var i = 0; i < this.blackKnights.children.length; i++) {
			
			this.blackKnights.children[i].healthBarProgress = (this.blackKnights.children[i].health - this.blackKnights.children[i].damage)/this.blackKnights.children[i].health * 100;

			this.blackKnights.children[i].bar.context.clearRect(this.blackKnights.children[i].body.position.x, 0, this.blackKnights.children[i].healthBarProgress, this.blackKnights.children[i].bar.height);

	        this.blackKnights.children[i].bar.context.fillStyle = '#f00';   
	        
			
			this.blackKnights.children[i].bar.context.fillRect(0, 0, this.blackKnights.children[i].healthBarProgress, 2);

			this.blackKnights.children[i].healthBar.x = this.blackKnights.children[i].body.position.x +20;
			this.blackKnights.children[i].healthBar.width = this.blackKnights.children[i].healthBarProgress;
			
			if (this.blackKnights.children[i].healthBarProgress <= 0) {
				this.blackKnights.children[i].healthBar.width = 0;
				
			}
			
			this.blackKnights.children[i].healthBar.y = this.blackKnights.children[i].y - 100;
		}
		
	},
	
/*/////////////////////////////////////////////////////////////////////////////////////////////
  ____       _   _   _               _   _            ____  _        _      _                  
 / ___|  ___| |_| |_(_)_ __   __ _  | |_| |__   ___  / ___|| | _____| | ___| |_ ___  _ __  ___ 
 \___ \ / _ | __| __| | '_ \ / _` | | __| '_ \ / _ \ \___ \| |/ / _ | |/ _ | __/ _ \| '_ \/ __|
  ___) |  __| |_| |_| | | | | (_| | | |_| | | |  __/  ___) |   |  __| |  __| || (_) | | | \__ \
 |____/ \___|\__|\__|_|_| |_|\__, |  \__|_| |_|\___| |____/|_|\_\___|_|\___|\__\___/|_| |_|___/
                             |___/                                                             
*//////////////////////////////////////////////////////////////////////////////////////////////


	createSkeleton: function () {
		
		var x = this.game.width;
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var skeleton = this.skeletons.getFirstExists(false);

		if (!skeleton) {
			
			this.skeleton = new Skeleton(this.game, 0, 0);
			this.skeletons.add(this.skeleton);
			this.skeleton.bar = this.add.bitmapData(100,2);
			this.skeleton.healthBar = this.game.add.sprite(this.skeleton.x - this.skeleton.bar.width/2 -15, this.skeleton.y - 100, this.skeleton.bar);
		}

		this.skeleton.reset(x, y); //resetting the spawning coordinates of a skeleton when it is killed
		this.skeleton.revive();

	},

	skeletonHealth: function () {
		
		for (var i = 0; i < this.skeletons.children.length; i++) {
			
			this.skeletons.children[i].healthBarProgress = (this.skeletons.children[i].health - this.skeletons.children[i].damage)/this.skeletons.children[i].health * 100;
			this.skeletons.children[i].bar.context.clearRect(this.skeletons.children[i].body.position.x, 0, this.skeletons.children[i].healthBarProgress, this.skeletons.children[i].bar.height);
	        this.skeletons.children[i].bar.context.fillStyle = '#ff9c3e';   
			this.skeletons.children[i].bar.context.fillRect(0, 0, this.skeletons.children[i].healthBarProgress, 2);
			this.skeletons.children[i].healthBar.x = this.skeletons.children[i].body.position.x + 20;
			this.skeletons.children[i].healthBar.width = this.skeletons.children[i].healthBarProgress;
			
			if (this.skeletons.children[i].healthBarProgress <= 0) {
				
				this.skeletons.children[i].healthBar.width = 0;

			}
			
			this.skeletons.children[i].healthBar.y = this.skeletons.children[i].y - 100;
		}
		
	},

	skeletonMove: function () {
		
		if (!this.player1.dead) {
			for (var i = 0; i < this.skeletons.children.length; i ++) {
					
					if ( parseInt( this.skeletons.children[i].body.position.x) - parseInt(

						this.player1.body.position.x + 40) > 4 ) {
						
						if (parseInt(this.player1.body.position.x + 25) < parseInt(this.skeletons.children[i].body.position.x)) {
							
							this.skeletons.children[i].animations.play('move', 8, false);
							this.skeletons.children[i].anchor.setTo(0.5, 0.4);
							this.skeletons.children[i].body.velocity.x = -70;
							
						} else if (parseInt(this.player1.body.position.x + 25) > parseInt( this.skeletons.children[i].body.position.x)) {
							
							this.skeletons.children[i].animations.play('move', 8, false);
							this.skeletons.children[i].body.velocity.x = 70;

						}	
					
					} else {
						
						this.skeletons.children[i].body.velocity.x = 0;
					}

				if (this.player1.body.position.y > this.skeletons.children[i].body.position.y - 4) {
					
					this.skeletons.children[i].body.velocity.y = 70;
					this.skeletons.children[i].animations.play('move', 8, false);
				
				} else if (this.player1.y < this.skeletons.children[i].y + 4) {
					
					this.skeletons.children[i].body.velocity.y = -70;
					this.skeletons.children[i].animations.play('move', 8, false);
				
				} 
				else {
					
					this.skeletons.children[i].body.velocity.y = 0;
				}
			}
 		}
	},

	skeletonHit: function (player1, skeleton) {
		
		if (parseInt( skeleton.body.position.x) - parseInt(player1.body.position.x) < 5 || parseInt(player1.body.position.x) - parseInt( skeleton.body.position.x) < 5 ) {

			if (this.player1.healthBarProgress > 0) {
				
				if (this.keys.attack.isDown) {
					
					player1.animations.play('attack', 10, false);
					player1.anchor.setTo(0.5, 0.58);
					
					if ((skeleton.scale.x === 1 && player1.scale.x === -1) || (skeleton.scale.x === -1 && player1.scale.x === 1)) {
						
						// skeleton.animations.play('hit', 8, false);
						// skeleton.anchor.setTo(0.5, 0.85);
						skeleton.damage++;
					
					} 			
				};
				
				if (!skeleton.dead) {
					
					if (skeleton.healthBarProgress > 0) {
						
						if (!(this.keys.attack.isDown) || (skeleton.scale.x === -1 && player1.scale.x === -1)|| (skeleton.scale.x === 1 && player1.scale.x === 1)) {
							
							
								
								skeleton.animations.play('attack', 8, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage++;

								});
							
						}
					
					} else {
							
						this.skeletons.remove( skeleton );
						var skeletonDead = this.add.sprite(skeleton.x, skeleton.y, 'Skeleton1');
						skeletonDead.anchor.setTo(0.5,0.5);
						if (skeleton.x < player1.x) {
							
							skeletonDead.scale.setTo(1,1);
						
						} else {
							
							skeletonDead.scale.setTo(-1,1);
						}
						
						skeletonDead.animations.add('die', [32,33,34,35,36]);
						skeletonDead.play('die', 8 ,false, true);
						this.score += 200;
								
					}	
				}
						
			} else if (player1.healthBarProgress <= 0) {
				
				
					
					
					Skeleton.animations = null;
					

				
			}						
		}
	},


/*/////////////////////////////////////////////////////////////////////////
  ____       _   _   _               _   _            ____                
 / ___|  ___| |_| |_(_)_ __   __ _  | |_| |__   ___  | __ )  ___  ___ ___ 
 \___ \ / _ | __| __| | '_ \ / _` | | __| '_ \ / _ \ |  _ \ / _ \/ __/ __|
  ___) |  __| |_| |_| | | | | (_| | | |_| | | |  __/ | |_) | (_) \__ \__ \
 |____/ \___|\__|\__|_|_| |_|\__, |  \__|_| |_|\___| |____/ \___/|___|___/
                             |___/                                        
*/////////////////////////////////////////////////////////////////////////
	setDragon: function () {
		
		this.dragon = this.add.sprite((this.game.width-198)/2, this.game.height/2, 'Dragon');
		this.dragon.anchor.setTo(0.5, 0.5);
		this.dragon.scale.setTo(1.75);
		this.dragon.animations.add('take-off', [0,1,2]);
		this.dragon.animations.add('fly', [3,4,5]);
		this.dragon.animations.add('land', [6,7,8,9,10]);
		this.dragon.animations.add('fire1', [11,12,20,14,21,22,15,16]);
		this.dragon.animations.add('fire2', [27,28,29,30,31,32,23,24,33,25,26,28,27]);
		this.dragon.animations.add('die', [36,37,38,39,40,41,42]);
		this.dragon.animations.add('idle', [0]);
		this.dragon.alive = false;
		this.dragon.exists = false;
		this.dragon.dead = false;
		this.dragon.y = this.game.height/2.85;
		this.dragon.health = 4000;
		this.dragon.damage = 0;
		this.dragon.bar = this.add.bitmapData(100,10);
		this.dragon.healthBar = this.game.add.sprite(this.dragon.x - this.dragon.bar.width/2 -15, this.dragon.y - 100, this.dragon.bar);
		this.game.physics.arcade.enableBody(this.dragon);

	},


	unleashTheDragon: function () {
		//Dragon will only appear if the player score is more than 8000
		if (!this.dragon.exists && this.score >= 8000) {
			
			this.dragon.exists = true;
			this.dragon.alive = true;

		}
	},

	dracarys: function () {
		
		if (this.dragon.exists && this.dragon.alive) {
			
			if (!this.dragon.dragonFlyTimer) {
				//dragon is set on a timer so that every 10seconds it is either flying or on the ground
				this.dragon.dragonFlyTimer = window.setInterval(function() {
					
					if (!dragonFly) {
						
						DragonSlayer.Game.prototype.dragonFly();
						dragonFly = true;

					} else {
						
						DragonSlayer.Game.prototype.dragonLand();
						dragonFly = false;

					}
				
				}, 10000);
			}
			
			this.dragonFly();
			this.dragonLand();	
			this.dragonHealth();
		
		} 
			
			
		
		
	},

	dragonFly: function () {
		
		if (dragonFly) {
			//dragon will follow the player across the screen when flying
			this.dragon.anchor.setTo(0.5, 0.5);
			this.dragon.animations.play('fly', 8, true);
			this.dragonMove();
			this.game.physics.arcade.overlap(this.player1, this.dragon, this.dragonFlyHit, null, this);
		}
		
		dragonLanded = false;
		
	},


	dragonMove: function () {	
		
		if (!this.player1.dead) {
				
			if (parseInt(this.dragon.body.position.x + 99) > parseInt(this.player1.body.position.x)   ) {
				
				this.dragon.body.velocity.x = -100;
				this.dragon.animations.play('move', 8, false);

			} else if (parseInt(this.dragon.body.position.x + 100) < parseInt(this.player1.body.position.x)) {

				this.dragon.body.velocity.x = 100;
				this.dragon.animations.play('move', 8, false);

			} else {

				this.dragon.body.velocity.x = 0;

			}
		}
	},

	dragonFlyHit: function (player1, dragon) {
		//setting where the dragon can be hit when it is in the air
		if (parseInt(player1.body.position.y) - parseInt(dragon.body.position.y) < 180) {
			if (parseInt(player1.body.position.x) - parseInt(dragon.body.position.x) < 120 || (dragon.scale.x === -1.75 && player.scale.x === 1) && (player1.body.position.x) - parseInt(dragon.body.position.x) < 150) {
				
				if (this.keys.attack.isDown) {
					
					player1.animations.play('attack', 10, false);
					player1.anchor.setTo(0.5, 0.58);				
					dragon.damage++;
							
				};
			}
				
		}
	},

	dragonLand: function () {
		
		if (!dragonFly) {
			
			this.dragon.moveDown();
			this.ground.moveDown();
			this.background.moveDown();
			this.dragon.body.velocity.x = 0;
			this.game.physics.arcade.overlap(this.player1, this.dragon, this.dragonLandHit, null, this);

		}	
	},

	

	dragonLandHit: function (player1, dragon) {
		//setting where the dragon can be hit when it's on the ground
		if (this.keys.attack.isDown && ((parseInt(player1.body.position.y) - parseInt(dragon.body.position.y) < 70))) {
			
			player1.animations.play('attack', 10, false);
			player1.anchor.setTo(0.5, 0.58);				
			dragon.damage++;
					
		};

		if ( !this.dragon.flameOnTimer ) {
				//The dragon is also on a timer when it's on the ground to determine whether it will be breating fire
				this.dragon.flameOnTimer = window.setInterval(function() {
					
					if (!flameOn) {
						
						dragon.anchor.setTo(0.5, 0.5);
						dragon.animations.play('idle', 8, false);
						flameOn = true;

					} else {
						if ((dragon.scale.x === -1.75 && parseInt(dragon.body.position.x)-parseInt(player1.body.position.x) > 40) || (dragon.scale.x === 1.75 && parseInt(player1.body.position.x)-parseInt(dragon.body.position.x)> 350) && parseInt(player1.body.position.y)-parseInt(dragon.body.position.y) < 150) {
							dragon.anchor.setTo(0.5, 0.52);
							dragon.animations.play('fire1', 8, false).onComplete.add(function () {
								
								
								if (((dragon.scale.x === -1.75 && parseInt(dragon.body.position.x)-parseInt(player1.body.position.x) < 100)|| (dragon.scale.x === 1.75 && parseInt(player1.body.position.x)-parseInt(dragon.body.position.x) < 380))&&(parseInt(player1.body.position.y))) {

									player1.damage += 1000;
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									
								
								}
							});
						} else if ((dragon.scale.x === -1.75 && parseInt(dragon.body.position.x)-parseInt(player1.body.position.x) < 40) || (dragon.scale.x === 1.75 && parseInt(player1.body.position.x)-parseInt(dragon.body.position.x) < 350)  && (parseInt(player1.body.position.y)- parseInt(dragon.body.position.y) > 200) && (parseInt(player1.body.position.y) - parseInt(dragon.body.position.y) < 300)) {
							
							dragon.anchor.setTo(0.5, 0.3);
							dragon.animations.play('fire2', 8, false).onComplete.add(function () {
								
								if ((dragon.scale.x === -1.75 && parseInt(dragon.body.position.x)-parseInt(player1.body.position.x) < 100)|| (dragon.scale.x === 1.75 && parseInt(player1.body.position.x)-parseInt(dragon.body.position.x) < 380)) {

									player1.damage += 1000;
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									
								
								}
							});
						}
							
						
						flameOn = false;

					}

				}, Math.random()*8000);
			
			} 

	},

	

	dragonHealth: function () {
		//healthbar for the dragon
		this.dragon.healthBarProgress = (this.dragon.health - this.dragon.damage)/this.dragon.health * 100;

		this.dragon.bar.context.clearRect(0, 0, this.dragon.healthBarProgress, this.dragon.bar.height);

        this.dragon.bar.context.fillStyle = '#fe0319';
      
		this.dragon.bar.context.fillRect(0, 0, this.dragon.healthBarProgress, 10);

		//makes it update in the browser
		this.dragon.bar.dirty = true;
		this.dragon.healthBar.x = 320;
		this.dragon.healthBar.width = this.dragon.healthBarProgress * 9.5;
		
		if (this.dragon.healthBarProgress <= 0) {
			
			this.dragon.healthBar.width = 0;
			
			this.dragon.kill();
			

			if (!this.dragon.dead) {
				
				var dragonDead = this.add.sprite((this.game.width-198)/2, this.game.height/2, 'Dragon');
				dragonDead.anchor.setTo(0.5);
				dragonDead.scale.setTo(1.75);
				dragonDead.x = this.dragon.x;
				dragonDead.y = this.dragon.y;
				dragonDead.animations.add('die', [36,37,38,39,40,41,42]);
				dragonDead.animations.play('die', 8, false);
				this.score += 50000;
				this.blackKnights.setAll('body.velocity.x', 0);
				this.skeletons.setAll('body.velocity.x', 0);
				this.dragon.body.velocity.x = 0;
				this.blackKnights.setAll('body.velocity.y', 0);
				this.skeletons.setAll('body.velocity.y', 0);
				this.dragon.body.velocity.y = 0;
				this.blackKnightTimer = Number.MAX_VALUE;
				this.skeletonTimer = Number.MAX_VALUE;
				this.healthPotionTimer = Number.MAX_VALUE;
				this.chestTimer = Number.MAX_VALUE;
				this.crystalTimer = Number.MAX_VALUE;
				this.gemTimer = Number.MAX_VALUE;
				this.coinTimer = Number.MAX_VALUE; 
				for (var i = 0; i < this.blackKnights.children.length; i++) {
					this.blackKnights.children[i].kill();
				}

				for (var i = 0; i < this.skeletons.children.length; i++) {
					this.skeletons.children[i].kill();
				}
				var scoreBoard = new PlayerWin(this.game);
				scoreBoard.show(this.score);
				this.dragon.alive = false;
				this.dragon.exists = false;
				window.clearInterval(this.dragon.dragonFlyTimer);
				window.clearInterval(this.dragon.flameOnTimer);
				this.dragon.dead = true;

			}		
		}
		
		this.dragon.healthBar.y = 75	;
	},

/*///////////////////////////////////////////////////////////////////////////////////////
  ____       _   _   _                ____      _ _           _        _     _          
 / ___|  ___| |_| |_(_)_ __   __ _   / ___|___ | | | ___  ___| |_ __ _| |__ | | ___ ___ 
 \___ \ / _ | __| __| | '_ \ / _` | | |   / _ \| | |/ _ \/ __| __/ _` | '_ \| |/ _ / __|
  ___) |  __| |_| |_| | | | | (_| | | |__| (_) | | |  __| (__| || (_| | |_) | |  __\__ \
 |____/ \___|\__|\__|_|_| |_|\__, |  \____\___/|_|_|\___|\___|\__\__,_|_.__/|_|\___|___/
                             |___/                                                      
*///////////////////////////////////////////////////////////////////////////////////////


	createHealthPotion: function () {
		
		if (!this.healthPotion.exists) {

			this.healthPotion.x = this.game.rnd.realInRange(10, this.game.width -10);
			this.healthPotion.y = this.game.rnd.integerInRange(this.game.height -10, this.game.height/2);
			this.healthPotion.exists = true;		

		}		
	},

	healthPotionHit: function (player1, healthPotion) {
		
		healthPotion.kill();
		this.healthPotionCollected.exists = true;
		this.healthPotionCollected.x = healthPotion.x;
		this.healthPotionCollected.y = healthPotion.y;
		this.game.add.tween(this.healthPotionCollected).to({x: 30, y: 120}, 400, Phaser.Easing.Linear.NONE, true, 500);

		
	},

	heal: function () {
		if (this.healthPotionCollected.exists) {
			
			this.healthPotionTimer = Number.MAX_VALUE;
			
			if (this.keys.heal.isDown) {
				
				this.healthPotionTimer = this.game.time.now + 45000;
				this.player1.damage = 0;
				this.healthPotionCollected.exists = false;

			}
		}
	},

	createChest: function () {
		
		var x = this.game.rnd.integerInRange(15, this.game.width - 15);
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var chest = this.chests.getFirstExists(false);

		if (!chest) {
			
			this.chest = new Chest(this.game, 0, 0);
			this.chests.add(this.chest);
			
		}

		this.chest.reset(x, y);
		this.chest.revive();
	
	},

	chestHit: function (player1, chest) {

		chest.kill();
		this.score += 500;
		this.chestTimer = this.game.time.now + 30000;

	},

	createCrystal: function () {
		
		var x = this.game.rnd.integerInRange(15, this.game.width - 15);
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var crystal = this.crystals.getFirstExists(false);

		if (!crystal) {
			
			this.crystal = new Crystal(this.game, 0, 0);
			this.crystals.add(this.crystal);
			
		}

		this.crystal.reset(x, y);
		this.crystal.revive();
	
	},

	crystalHit: function (player1, crystal) {

		crystal.kill();
		this.score += 150;
		this.crystalTimer = this.game.time.now + 15000;
	
	},

	createGem: function () {
		
		var x = this.game.rnd.integerInRange(15, this.game.width - 15);
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var gem = this.gems.getFirstExists(false);

		if (!gem) {
			
			this.gem = new Gem(this.game, 0, 0);
			this.gems.add(this.gem);
			
		}

		this.gem.reset(x, y);
		this.gem.revive();
	
	},

	gemHit: function (player1, gem) {

		gem.kill();
		this.score += 450;
		this.gemlTimer = this.game.time.now + 37000;
	
	},

	createCoin: function () {
		
		var x = this.game.rnd.integerInRange(15, this.game.width - 15);
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var coin = this.coins.getFirstExists(false);

		if (!coin) {
			
			this.coin = new Coin(this.game, 0, 0);
			this.coins.add(this.coin);
			
		}

		this.coin.reset(x, y);
		this.coin.revive();
	
	},

	coinHit: function (player1, coin) {

		coin.kill();
		this.score += 700;
		this.coinTimer = this.game.time.now + 70000;
	
	},

	update: function () {
		//continuously updates the game i.e. player movements, music, enemy movements, checking to see whether the player has died or an enemy has died
		this.gameMusic.loop = true;
		this.movePlayer1();
		this.player1Health();

		//Black Knights and Skeletons spawn based on a timer
		if (this.blackKnightTimer < this.game.time.now) {
			
			this.createBlackKnight();
			this.blackKnightTimer = this.game.time.now + this.blackKnightRate;	
		
		}
		
		this.moveKnight();
		this.knightHealth();
		this.game.physics.arcade.overlap(this.player1, this.blackKnights, this.knightHit, null, this);
		
		
		if (this.skeletonTimer < this.game.time.now) {
			
			this.createSkeleton();
			this.skeletonTimer = this.game.time.now + this.skeletonRate;	
		
		}
		
		this.skeletonMove();
		this.skeletonHealth();
		this.game.physics.arcade.overlap(this.player1, this.skeletons, this.skeletonHit, null, this);
		this.player1.body.collideWorldBounds = true;
		
		this.unleashTheDragon();
		this.dracarys();
		
		if ((this.healthPotionTimer < this.game.time.now)) {

			this.createHealthPotion();
			this.healthPotionTimer = this.game.time.now + this.healthPotionRate;
		}

		this.game.physics.arcade.overlap(this.player1, this.healthPotion, this.healthPotionHit, null, this);
		this.heal();

		if ((this.chestTimer < this.game.time.now)) {

			this.createChest();
			this.chestTimer = this.game.time.now + this.chestRate;
		
		}

		this.game.physics.arcade.overlap(this.player1, this.chests, this.chestHit, null, this);
		
		if ((this.crystalTimer < this.game.time.now)) {

			this.createCrystal();
			this.crystalTimer = this.game.time.now + this.crystalRate;
		
		}

		this.game.physics.arcade.overlap(this.player1, this.crystals, this.crystalHit, null, this);

		if ((this.gemTimer < this.game.time.now)) {

			this.createGem();
			this.gemTimer = this.game.time.now + this.gemRate;
		
		}

		this.game.physics.arcade.overlap(this.player1, this.gems, this.crystalHit, null, this);


		this.scoreText.text = 'Thine score doth be: ' + this.score;
	},

	shutdown: function () {
		
		//restores all defaults for when the game is restarted
		this.blackKnights.destroy();
		this.skeletons.destroy();
		this.dragon.destroy();
		this.score = 0;
		this.blackKnightTimer = 0;
		this.skeletonTimer = 0;
		this.healthPotionTimer = 70000;
		this.chestTimer = 30000;
		this.crystalTimer = 15000;
		this.gemTimer = 37000;
		this.coinTimer = 70000;
	
	}
};