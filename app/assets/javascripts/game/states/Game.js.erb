var DragonSlayer = DragonSlayer || {};
 
var dragonFly = true;
var dragonLanded = false;
var flameOn = false;

DragonSlayer.Game = function () {

	this.blackKnightRate = 5000;
	this.blackKnightTimer = 0;
	
	this.skeletonRate = 3000;
	this.skeletonTimer = 0;
	this.score = 0;
};

DragonSlayer.Game.prototype = {
	
	create: function () {
		
		this.background = this.game.add.tileSprite(0, 0, this.game.width, this.game.height/2.01,'Wall');
		this.ground = this.game.add.tileSprite(0, this.game.height/2, this.game.width, this.game.height, 'Grass');
		

		this.dragon = this.add.sprite((this.game.width-198)/2, this.game.height/2, 'Dragon');

		this.dragon.anchor.setTo(0.5, 0.5);
		this.dragon.scale.setTo(1.75);
		this.dragon.animations.add('take-off', [0,1,2]);
		this.dragon.animations.add('fly', [3,4,5]);
		this.dragon.animations.add('land', [6,7,8,9,10]);
		this.dragon.animations.add('fire1', [11,12,20,14,21,22,15,16]);
		this.dragon.animations.add('fire2', [27,28,29,30,31,32,23,24,33,25,26,28,27]);
		this.dragon.animations.add('die', [36,37,38,39,40,41,42]);
		this.dragon.animations.add('idle', [0]);
		this.dragon.alive = false;
		this.dragon.exists = false;
		this.dragon.y = this.game.height/2.85;
		this.dragon.health = 10000;
		this.dragon.damage = 0;

		this.player1 = this.add.sprite(0, this.game.height/1.3, 'Player1');
		this.player1.x = this.game.width/2 - this.player1.width/4.3;
		this.player1.anchor.setTo(0.5);
		this.player1.animations.add('move', [65,66,67,68]);
		this.player1.animations.add('attack', [19,20,21,22,23,24,31,32,33,0]);
		this.player1.animations.add('die', [34,35,36,37,38,39,40,41,42]);
		this.player1.animations.add('hit', [54,55,56,57,58,55,54,0]);
		
		this.player2 = this.add.sprite(0, this.game.height/1.7, 'Player2');
		this.player2.x = this.game.width/2 - this.player2.width/4.3;
		this.player2.animations.add('move', [36,37,38,39,40,41,42,43,44,45,46,47]);
		this.player2.animations.add('attack', [0,1,2,3,4,5,6,7]);
		this.player2.animations.add('die', [20,21,22,23,24,25]);
		this.player2.animations.add('hit', [26,27,28,29,28,27,26]);



		this.healthPotion = this.add.sprite(500, 500, 'Potions');
		this.healthPotion.animations.add('health', [25]);
		this.healthPotion.animations.play('health', 1, false);
		this.healthPotion.scale.setTo(1.2);

		this.treasure = this.add.sprite(500, 500, 'Rewards');
		this.treasure.animations.add('sparkle', [0,1,2,3,8,9,10,11]);
		this.treasure.animations.play('sparkle', 8, true);
		this.treasure.scale.setTo(1.4);

		this.treasure1 = this.add.sprite(550, 500, 'Rewards');
		this.treasure1.animations.add('sparkle', [4,5,6,7,12,13,14,15]);
		this.treasure1.animations.play('sparkle', 8, true);
		this.treasure1.scale.setTo(1.4);

		this.treasure2 = this.add.sprite(600, 500, 'Rewards');
		this.treasure2.animations.add('sparkle', [16,17,18,19]);
		this.treasure2.animations.play('sparkle', 8, true);
		this.treasure2.scale.setTo(1.4);

		this.treasure3 = this.add.sprite(650, 500, 'Rewards');
		this.treasure3.animations.add('sparkle', [20,21,22,23]);
		this.treasure3.animations.play('sparkle', 8, true);
		this.treasure3.scale.setTo(1.4);


		this.blackKnights = this.game.add.group();
		this.skeletons = this.game.add.group();
		
		this.cursors = {
			
			up: this.game.input.keyboard.addKey(Phaser.Keyboard.UP), 
            down: this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN), 
            left: this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT), 
            right: this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT),
            attack: this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)

		};

		this.player1.health = 20000;

		this.player1.damage = 0;
		
		this.player1.bar = this.add.bitmapData(100,2);
		this.player1.healthBar = this.game.add.sprite(this.player1.x - this.player1.bar.width/2 -15, this.player1.y - 100, this.player1.bar);

		this.dragon.bar = this.add.bitmapData(100,10);
		this.dragon.healthBar = this.game.add.sprite(this.dragon.x - this.dragon.bar.width/2 -15, this.dragon.y - 100, this.dragon.bar);

		this.game.physics.startSystem(Phaser.Physics.ARCADE);
		this.game.physics.arcade.enableBody(this.player1);
		this.game.physics.arcade.enableBody(this.dragon);
		
		this.scoreText = this.game.add.bitmapText(10,10, 'Albion', 'Thine score doth be: 0', 50);

	},

	getCursors: function () {
		
		if (this.cursors.left.isDown) {
			
			this.player1.scale.setTo(-1, 1);
			this.player1.body.velocity.x = -120;
			this.clipClop();
		
		} else if (this.cursors.right.isDown) {
			
			this.player1.scale.setTo(1, 1)
			this.player1.body.velocity.x = 120;
			this.clipClop();
		
		} else {
			
			this.player1.body.velocity.x = 0;

		}
		
		if (this.cursors.up.isDown) {
			
			this.clipClop();
			
			if (this.player1.body.y <= this.game.height/3) {
				
				this.player1.body.velocity.y = 0;
			
			} else {
				
				this.player1.body.velocity.y = -120;
			}
				
		} else if (this.cursors.down.isDown) {
			
			this.player1.body.velocity.y = 120;
			this.clipClop();

		} else {
			
			this.player1.body.velocity.y = 0;
		}
	},

	player1Health: function () {
		
		this.player1.healthBarProgress = (this.player1.health - this.player1.damage)/this.player1.health * 100;

		this.player1.bar.context.clearRect(this.player1.body.position.x, 0, this.player1.healthBarProgress, this.player1.bar.height);

        this.player1.bar.context.fillStyle = '#0f0';
      
		this.player1.bar.context.fillRect(0, 0, this.player1.healthBarProgress, 2);

		//makes it update in the browser
		this.player1.bar.dirty = true;
		this.player1.healthBar.x = this.player1.body.position.x +20;
		this.player1.healthBar.width = this.player1.healthBarProgress;
		
		if (this.player1.healthBarProgress <= 0) {
			
			this.player1.healthBar.width = 0;
			
			if (!this.player1.dead) {
				
				this.blackKnights.setAll('body.velocity.x', 0);
				this.skeletons.setAll('body.velocity.x', 0);
				this.dragon.body.velocity.x = 0;
				this.blackKnights.setAll('body.velocity.y', 0);
				this.skeletons.setAll('body.velocity.y', 0);
				this.dragon.body.velocity.y = 0;
				this.blackKnightTimer = Number.MAX_VALUE;
				this.skeletonTimer = Number.MAX_VALUE;

				var scoreBoard = new Scoreboard(this.game);
				scoreBoard.show(this.score);

				this.player1.dead = true;
			
			}	
		}
		
		this.player1.healthBar.y = this.player1.y - 100;
	},

	clipClop: function () {
		
		this.player1.animations.play('move', 8, false);
		this.player1.anchor.setTo(0.5, 0.73);
	},

	fight: function () {
		
		if (this.cursors.attack.isDown) {
			
			this.cursors.disabled = true;
			this.player1.body.velocity.x = 0;
			this.player1.body.velocity.y = 0;
			
		} else {
			this.getCursors();
		}
	},

	movePlayer1: function () {
		this.fight();
		this.faceMe();
		
		this.player1.body.collideWorldBounds = true;
	},

	faceMe: function () {
		
		for (var i = 0; i < this.blackKnights.children.length; i++) {
			
			if (this.player1.body.position.x > this.blackKnights.children[i].body.position.x) {
				
				this.blackKnights.children[i].scale.setTo(1,1);

			} else {
				
				this.blackKnights.children[i].scale.setTo(-1,1);

			}

			if (this.player1.y > this.blackKnights.children[i].y) {
				
				this.player1.moveUp()
				this.blackKnights.children[i].moveDown();
				this.ground.moveDown();
				this.background.moveDown();

			} else {
				
				this.player1.moveDown();
				this.ground.moveDown();
				this.background.moveDown();
			}
		}

		for (var i = 0; i < this.skeletons.children.length; i++) {
			
			if (this.player1.body.position.x > this.skeletons.children[i].body.position.x) {
				
				this.skeletons.children[i].scale.setTo(1,1);
			
			} else {
				
				this.skeletons.children[i].scale.setTo(-1,1);
			}

			if (this.player1.y > this.skeletons.children[i].y) {
				
				this.player1.moveUp()
				this.skeletons.children[i].moveDown();
				this.ground.moveDown();
				this.background.moveDown();

			} else {
				
				this.player1.moveDown();
				this.ground.moveDown();
				this.background.moveDown();
			}
		}

		if (this.player1.body.position.x > (this.dragon.body.position.x + 99)) {
				
				this.dragon.scale.setTo(1.75, 1.75);
			
			} else {
				
				this.dragon.scale.setTo(-1.75, 1.75);
			}
	},


	moveKnight: function () {		
		
		if (!this.player1.dead) {
			
			for (var i = 0; i < this.blackKnights.children.length; i++) {
				
				var blackKnight = this.blackKnights.children[i]
				
				if (parseInt(blackKnight.body.position.x) - parseInt(this.player1.body.position.x) > 40 && ((blackKnight.scale.x === -1 && this.player1.scale.x === 1) || (blackKnight.scale.x === -1 && this.player1.scale.x === -1) ) ) {
					
					blackKnight.body.velocity.x = -100;
					blackKnight.animations.play('move', 8, false);

				} else if (parseInt(this.player1.body.position.x) - parseInt(blackKnight.body.position.x) > 40 && ((blackKnight.scale.x === 1 && this.player1.scale.x === 1) || (blackKnight.scale.x === 1 && this.player1.scale.x === -1) ) ) {
					
					blackKnight.body.velocity.x = 100;
					blackKnight.animations.play('move', 8, false);

				} else {

					blackKnight.body.velocity.x = 0;

				}

				
				if (this.player1.body.position.y > blackKnight.body.position.y - 2) {
					
					blackKnight.body.velocity.y = 100;
					blackKnight.animations.play('move', 8, false);
				
				} else if (this.player1.y < blackKnight.y + 2) {
					
					blackKnight.body.velocity.y = -100;
					blackKnight.animations.play('move', 8, false);
				
				} 
				else {
					
					blackKnight.body.velocity.y = 0;
				}
			}
		}
	},

	knightHit: function (player1, blackKnight) {
		
		if ((parseInt( blackKnight.body.position.x) - parseInt(player1.body.position.x) <= 4 || parseInt(player1.body.position.x) - parseInt( blackKnight.body.position.x) <= 4 ) ) {

			if (this.player1.healthBarProgress > 0) {
				
				if (this.cursors.attack.isDown) {
					
					player1.animations.play('attack', 10, false);
					player1.anchor.setTo(0.5, 0.58);
					
					if ((blackKnight.scale.x === 1 && player1.scale.x === -1) || (blackKnight.scale.x === -1 && player1.scale.x === 1)) {
						
						blackKnight.animations.play('hit', 8, false);
						blackKnight.damage++;
					
					} 
					

					
				};
				
				if (!blackKnight.dead) {
					if (blackKnight.healthBarProgress > 0) {
						if (!(this.cursors.attack.isDown) || (blackKnight.scale.x === -1 && player1.scale.x === -1)|| (blackKnight.scale.x === 1 && player1.scale.x === 1)) {
							
							if (player1.y > blackKnight.y) {
								
								blackKnight.animations.play('attack1', 8, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage++;

								});
							
							} else {
								
								blackKnight.animations.play('attack2', 7, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage +=2
									
									
								});	
							}
						}
					} else {
						this.blackKnights.remove( blackKnight );
						var blackKnightDead = this.add.sprite(blackKnight.x, blackKnight.y, 'BlackKnight');
						blackKnightDead.anchor.setTo(0.5,0.5);
						
						if (blackKnight.x < player1.x) {
							
							blackKnightDead.scale.setTo(1,1);

						} else {
							
							blackKnightDead.scale.setTo(-1,1);
						}
						
						blackKnightDead.animations.add('die', [48, 49, 50, 51, 52, 53]);
						blackKnightDead.play('die', 8 ,false, true);
						this.score += 500;
								
					}	
				}
						
			} else if (player1.healthBarProgress <= 0) {
				player1.animations.play('die', 8, false).onComplete.add(function () {
					player1.player1Dead = true;
					blackKnight.animations = null;
					player1.kill();

				})
			}						
		}
	},

	knightCollide: function () {

	},

	createBlackKnight: function () {
		
		var x = this.game.rnd.realInRange(0, this.game.width);
		var y = this.game.rnd.realInRange(this.game.height, this.game.height/2);
		var blackKnight = this.blackKnights.getFirstExists(false);
		if (!blackKnight) {
			
			this.blackKnight = new BlackKnight(this.game, 0, 0);
			this.blackKnights.add(this.blackKnight);
			this.blackKnight.bar = this.add.bitmapData(100,2);
			this.blackKnight.healthBar = this.game.add.sprite(this.blackKnight.x - this.blackKnight.bar.width/2 -15, this.blackKnight.y - 100, this.blackKnight.bar);
		}

		this.blackKnight.reset(x, y);
		this.blackKnight.revive();

	},

	knightHealth: function () {
		
		for (var i = 0; i < this.blackKnights.children.length; i++) {
			
			this.blackKnights.children[i].healthBarProgress = (this.blackKnights.children[i].health - this.blackKnights.children[i].damage)/this.blackKnights.children[i].health * 100;

			this.blackKnights.children[i].bar.context.clearRect(this.blackKnights.children[i].body.position.x, 0, this.blackKnights.children[i].healthBarProgress, this.blackKnights.children[i].bar.height);

	        this.blackKnights.children[i].bar.context.fillStyle = '#f00';   
	        
			
			this.blackKnights.children[i].bar.context.fillRect(0, 0, this.blackKnights.children[i].healthBarProgress, 2);

			this.blackKnights.children[i].healthBar.x = this.blackKnights.children[i].body.position.x +20;
			this.blackKnights.children[i].healthBar.width = this.blackKnights.children[i].healthBarProgress;
			
			if (this.blackKnights.children[i].healthBarProgress <= 0) {
				this.blackKnights.children[i].healthBar.width = 0;
				
			}
			
			this.blackKnights.children[i].healthBar.y = this.blackKnights.children[i].y - 100;
		}
		
	},
	
	createSkeleton: function () {
		
		var x = this.game.width;
		var y = this.game.rnd.integerInRange(this.game.height, this.game.height/2);
		var skeleton = this.skeletons.getFirstExists(false);

		if (!skeleton) {
			
			this.skeleton = new Skeleton(this.game, 0, 0);
			this.skeletons.add(this.skeleton);
			this.skeleton.bar = this.add.bitmapData(100,2);
			this.skeleton.healthBar = this.game.add.sprite(this.skeleton.x - this.skeleton.bar.width/2 -15, this.skeleton.y - 100, this.skeleton.bar);
		}

		this.skeleton.reset(x, y);
		this.skeleton.revive();

	},

	skeletonHealth: function () {
		
		for (var i = 0; i < this.skeletons.children.length; i++) {
			
			this.skeletons.children[i].healthBarProgress = (this.skeletons.children[i].health - this.skeletons.children[i].damage)/this.skeletons.children[i].health * 100;
			this.skeletons.children[i].bar.context.clearRect(this.skeletons.children[i].body.position.x, 0, this.skeletons.children[i].healthBarProgress, this.skeletons.children[i].bar.height);
	        this.skeletons.children[i].bar.context.fillStyle = '#ff9c3e';   
			this.skeletons.children[i].bar.context.fillRect(0, 0, this.skeletons.children[i].healthBarProgress, 2);
			this.skeletons.children[i].healthBar.x = this.skeletons.children[i].body.position.x + 20;
			this.skeletons.children[i].healthBar.width = this.skeletons.children[i].healthBarProgress;
			
			if (this.skeletons.children[i].healthBarProgress <= 0) {
				
				this.skeletons.children[i].healthBar.width = 0;

			}
			
			this.skeletons.children[i].healthBar.y = this.skeletons.children[i].y - 100;
		}
		
	},

	skeletonMove: function () {
		
		if (!this.player1.dead) {
			for (var i = 0; i < this.skeletons.children.length; i ++) {
					
					if ( parseInt( this.skeletons.children[i].body.position.x) - parseInt(

						this.player1.body.position.x + 40) > 4 ) {
						
						if (parseInt(this.player1.body.position.x + 25) < parseInt(this.skeletons.children[i].body.position.x)) {
							
							this.skeletons.children[i].animations.play('move', 8, false);
							this.skeletons.children[i].anchor.setTo(0.5, 0.4);
							this.skeletons.children[i].body.velocity.x = -70;
							
						} else if (parseInt(this.player1.body.position.x + 25) > parseInt( this.skeletons.children[i].body.position.x)) {
							
							this.skeletons.children[i].animations.play('move', 8, false);
							this.skeletons.children[i].body.velocity.x = 70;

						}	
					
					} else {
						
						this.skeletons.children[i].body.velocity.x = 0;
					}

				if (this.player1.body.position.y > this.skeletons.children[i].body.position.y - 2) {
					
					this.skeletons.children[i].body.velocity.y = 70;
					this.skeletons.children[i].animations.play('move', 8, false);
				
				} else if (this.player1.y < this.skeletons.children[i].y + 2) {
					
					this.skeletons.children[i].body.velocity.y = -70;
					this.skeletons.children[i].animations.play('move', 8, false);
				
				} 
				else {
					
					this.skeletons.children[i].body.velocity.y = 0;
				}
			}
 		}
	},

	skeletonHit: function (player1, skeleton) {
		
		if (parseInt( skeleton.body.position.x) - parseInt(player1.body.position.x) < 5 || parseInt(player1.body.position.x) - parseInt( skeleton.body.position.x) < 5 ) {

			if (this.player1.healthBarProgress > 0) {
				
				if (this.cursors.attack.isDown) {
					
					player1.animations.play('attack', 10, false);
					player1.anchor.setTo(0.5, 0.58);
					
					if ((skeleton.scale.x === 1 && player1.scale.x === -1) || (skeleton.scale.x === -1 && player1.scale.x === 1)) {
						
						// skeleton.animations.play('hit', 8, false);
						// skeleton.anchor.setTo(0.5, 0.85);
						skeleton.damage++;
					
					} 
					

					
				};
				
				if (!skeleton.dead) {
					
					if (skeleton.healthBarProgress > 0) {
						
						if (!(this.cursors.attack.isDown) || (skeleton.scale.x === -1 && player1.scale.x === -1)|| (skeleton.scale.x === 1 && player1.scale.x === 1)) {
							
							
								
								skeleton.animations.play('attack', 8, false).onComplete.add(function () {
									
									player1.play('hit', 8, false);
									player1.anchor.setTo(0.5, 0.52);
									player1.damage++;

								});
							
						}
					
					} else {
							
						this.skeletons.remove( skeleton );
						var skeletonDead = this.add.sprite(skeleton.x, skeleton.y, 'Skeleton1');
						skeletonDead.anchor.setTo(0.5,0.5);
						if (skeleton.x < player1.x) {
							
							skeletonDead.scale.setTo(1,1);
						
						} else {
							
							skeletonDead.scale.setTo(-1,1);
						}
						
						skeletonDead.animations.add('die', [32,33,34,35,36]);
						skeletonDead.play('die', 8 ,false, true);
						this.score += 200;
								
					}	
				}
						
			} else if (player1.healthBarProgress <= 0) {
				
				player1.animations.play('die', 8, false).onComplete.add(function () {
					
					
					Skeleton.animations = null;
					player1.kill();

				})
			}						
		}
	},

	unleashTheDragon: function () {
		
		if (!this.dragon.exists && this.score >= 0) {
			
			this.dragon.exists = true;
			this.dragon.alive = true;

		}
	},

	dragonMove: function () {	
		
		if (!this.player1.dead) {
				
			if (parseInt(this.dragon.body.position.x + 99) > parseInt(this.player1.body.position.x)   ) {
				
				this.dragon.body.velocity.x = -100;
				this.dragon.animations.play('move', 8, false);

			} else if (parseInt(this.dragon.body.position.x + 100) < parseInt(this.player1.body.position.x)) {

				this.dragon.body.velocity.x = 100;
				this.dragon.animations.play('move', 8, false);

			} else {

				this.dragon.body.velocity.x = 0;

			}
		}
	},

	dragonFlyHit: function (player1, dragon) {
		console.log(player1.body.position.y - dragon.body.position.y);
		if (player1.body.position.y - dragon.body.position.y < 170) {

			if (this.cursors.attack.isDown) {
				
				player1.animations.play('attack', 10, false);
				player1.anchor.setTo(0.5, 0.58);				
				dragon.damage++;
						
			};
		}
			


	},

	dragonFly: function(){
		
		if (dragonFly) {
			
			this.dragon.anchor.setTo(0.5, 0.5);
			this.dragon.animations.play('fly', 8, true);
			this.dragonMove();
			this.game.physics.arcade.overlap(this.player1, this.dragon, this.dragonFlyHit, null, this);
		}
		
		dragonLanded = false;
		
	},

	dragonLandHit: function (player1, dragon) {
		
		if (this.cursors.attack.isDown) {
			
			player1.animations.play('attack', 10, false);
			player1.anchor.setTo(0.5, 0.58);				
			dragon.animations.play('hit', 8, false);	
			dragon.damage++;
					
		};

		if ( !this.dragon.flameOnTimer ) {
				
				this.dragon.flameOnTimer = window.setInterval(function() {
					
					if (!flameOn) {
						
						dragon.anchor.setTo(0.5, 0.5);
						dragon.animations.play('idle', 8, false);
						flameOn = true;

					} else {
						
						dragon.anchor.setTo(0.5, 0.3);
						dragon.animations.play('fire2', 8, false).onComplete.add(function () {
							
							if (player1.body.position.x > dragon.body.position.x - 200 && player1.body.position.x < dragon.body.position.x + 200) {

								player1.damage += 1000;
								player1.play('hit', 8, false);
								player1.anchor.setTo(0.5, 0.52);
								
							
							}
						});
						
						flameOn = false;

					}

				}, Math.random()*8000);
			} else if (!this.dragon.exists || !this.dragon.alive || this.player1.dead) {
			
			window.clearInterval(this.dragon.flameOnTimer);
		
		}

	},

	dragonLand: function () {
		if (!dragonFly) {
			
			this.dragon.moveDown();
			this.ground.moveDown();
			this.background.moveDown();
			this.dragon.body.velocity.x = 0;
			this.game.physics.arcade.overlap(this.player1, this.dragon, this.dragonLandHit, null, this);

		}	
	},

	dragonHealth: function () {
		
		this.dragon.healthBarProgress = (this.dragon.health - this.dragon.damage)/this.dragon.health * 100;

		this.dragon.bar.context.clearRect(0, 0, this.dragon.healthBarProgress, this.dragon.bar.height);

        this.dragon.bar.context.fillStyle = '#fe0319';
      
		this.dragon.bar.context.fillRect(0, 0, this.dragon.healthBarProgress, 10);

		//makes it update in the browser
		this.dragon.bar.dirty = true;
		this.dragon.healthBar.x = 320;
		this.dragon.healthBar.width = this.dragon.healthBarProgress * 9.5;
		
		if (this.dragon.healthBarProgress <= 0) {
			
			this.dragon.healthBar.width = 0;
			
			if (dragon.alive) {
				this.dragon.animations.play('die', 8, false);
				this.dragon.alive = false;
			}		
		}
		
		this.dragon.healthBar.y = 25;
	},

	update: function () {
		
		this.movePlayer1();
		this.player1Health();

		if (this.blackKnightTimer < this.game.time.now) {
			this.createBlackKnight();
			this.blackKnightTimer = this.game.time.now + this.blackKnightRate;	
		}
		
		this.moveKnight();
		this.knightHealth();
		this.game.physics.arcade.overlap(this.player1, this.blackKnights, this.knightHit, null, this);
		this.game.physics.arcade.overlap(this.blackKnights, this.blackKnights, this.knightCollide, null, this);
		
		if (this.skeletonTimer < this.game.time.now) {
			this.createSkeleton();
			
			this.skeletonTimer = this.game.time.now + this.skeletonRate;	
		
		}
		
		this.skeletonMove();
		this.skeletonHealth();
		this.game.physics.arcade.overlap(this.player1, this.skeletons, this.skeletonHit, null, this);
		this.player1.body.collideWorldBounds = true;
		
		this.unleashTheDragon();
		
		if (this.dragon.exists && this.dragon.alive) {
			
			if ( !this.dragon.dragonFlyTimer ) {
				
				this.dragon.dragonFlyTimer = window.setInterval(function() {
					
					if (!dragonFly) {
						
						DragonSlayer.Game.prototype.dragonFly();
						dragonFly = true;

					} else {
						
						DragonSlayer.Game.prototype.dragonLand();
						dragonFly = false;

					}
				
				}, 10000);
			}
			
			this.dragonFly();
			this.dragonLand();	
			this.dragonHealth();
		
		} else if (!this.dragon.exists || !this.dragon.alive || this.player1.dead) {
			
			window.clearInterval(this.dragon.dragonFlyTimer);
		
		}
		
		this.scoreText.text = 'Thine score doth be: ' + this.score;
		
	},

	shutdown: function () {
		
		this.blackKnights.destroy();
		this.skeletons.destroy();
		this.dragon.destroy();
		this.score = 0;
		this.blackKnightTimer = 0;
		this.skeletonTimer = 0;
	}
};